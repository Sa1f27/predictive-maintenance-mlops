name: üöÄ CI/CD Pipeline

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "README.md"

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: ‚öôÔ∏è Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: üì¶ Cache Pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üì• Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üé® Lint with Flake8
        run: |
          # Run flake8 to check for code quality issues, but don't fail the build.
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: üß™ Run Unit Tests (Placeholder)
        run: echo "‚úÖ No unit tests configured. This is where you would run 'pytest'."

  build-and-push-ecr-image:
    name: üì¶ Continuous Delivery (Build & Push to AWS)
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîë Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üèóÔ∏è Build, Tag, and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: üóëÔ∏è Clean up ECR Image to Prevent Costs
        # This step runs even if previous steps fail, to ensure cleanup.
        if: always()
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # This step deletes the 'latest' tag to avoid ECR storage costs.
          # It's useful for CI pipelines where the 'latest' image is ephemeral.
          # '|| true' ensures the workflow doesn't fail if the image is already gone.
          aws ecr batch-delete-image \
            --repository-name $ECR_REPOSITORY \
            --image-ids imageTag=$IMAGE_TAG || true
